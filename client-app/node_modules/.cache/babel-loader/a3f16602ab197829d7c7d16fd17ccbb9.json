{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Transport = require(\"../transport\");\nvar parseqs = require(\"parseqs\");\nvar parser = require(\"engine.io-parser\");\nvar yeast = require(\"yeast\");\nvar debug = require(\"debug\")(\"engine.io-client:polling\");\nvar Polling = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(Polling, _Transport);\n  var _super = _createSuper(Polling);\n  function Polling() {\n    _classCallCheck(this, Polling);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Polling, [{\n    key: \"name\",\n    get:\n    /**\n     * Transport name.\n     */\n    function get() {\n      return \"polling\";\n    }\n\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this.poll();\n    }\n\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var self = this;\n      this.readyState = \"pausing\";\n      function pause() {\n        debug(\"paused\");\n        self.readyState = \"paused\";\n        onPause();\n      }\n      if (this.polling || !this.writable) {\n        var total = 0;\n        if (this.polling) {\n          debug(\"we are currently polling - waiting to pause\");\n          total++;\n          this.once(\"pollComplete\", function () {\n            debug(\"pre-pause polling complete\");\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          debug(\"we are currently writing - waiting to pause\");\n          total++;\n          this.once(\"drain\", function () {\n            debug(\"pre-pause writing complete\");\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      debug(\"polling\");\n      this.polling = true;\n      this.doPoll();\n      this.emit(\"poll\");\n    }\n\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var self = this;\n      debug(\"polling got data %s\", data);\n      var callback = function callback(packet, index, total) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === self.readyState && packet.type === \"open\") {\n          self.onOpen();\n        }\n\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          self.onClose();\n          return false;\n        }\n\n        // otherwise bypass onData and handle the message\n        self.onPacket(packet);\n      };\n\n      // decode payload\n      parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emit(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {\n          debug('ignoring poll - transport state \"%s\"', this.readyState);\n        }\n      }\n    }\n\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var self = this;\n      function close() {\n        debug(\"writing close packet\");\n        self.write([{\n          type: \"close\"\n        }]);\n      }\n      if (\"open\" === this.readyState) {\n        debug(\"transport open - closing\");\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        debug(\"transport not open - deferring close\");\n        this.once(\"open\", close);\n      }\n    }\n\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this = this;\n      this.writable = false;\n      parser.encodePayload(packets, function (data) {\n        _this.doWrite(data, function () {\n          _this.writable = true;\n          _this.emit(\"drain\");\n        });\n      });\n    }\n\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\";\n\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      query = parseqs.encode(query);\n\n      // avoid port if default for schema\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      // prepend ? to query\n      if (query.length) {\n        query = \"?\" + query;\n      }\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n    }\n  }]);\n  return Polling;\n}(Transport);\nmodule.exports = Polling;","map":{"version":3,"names":["Transport","require","parseqs","parser","yeast","debug","Polling","poll","onPause","self","readyState","pause","polling","writable","total","once","doPoll","emit","data","callback","packet","index","type","onOpen","onClose","onPacket","decodePayload","socket","binaryType","forEach","close","write","packets","encodePayload","doWrite","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","encode","Number","length","ipv6","hostname","indexOf","path","module","exports"],"sources":["C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/engine.io-client/lib/transports/polling.js"],"sourcesContent":["const Transport = require(\"../transport\");\nconst parseqs = require(\"parseqs\");\nconst parser = require(\"engine.io-parser\");\nconst yeast = require(\"yeast\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\n\nclass Polling extends Transport {\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n  doOpen() {\n    this.poll();\n  }\n\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n  pause(onPause) {\n    const self = this;\n\n    this.readyState = \"pausing\";\n\n    function pause() {\n      debug(\"paused\");\n      self.readyState = \"paused\";\n      onPause();\n    }\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function() {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function() {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n  onData(data) {\n    const self = this;\n    debug(\"polling got data %s\", data);\n    const callback = function(packet, index, total) {\n      // if its the first message we consider the transport open\n      if (\"opening\" === self.readyState && packet.type === \"open\") {\n        self.onOpen();\n      }\n\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        self.onClose();\n        return false;\n      }\n\n      // otherwise bypass onData and handle the message\n      self.onPacket(packet);\n    };\n\n    // decode payload\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n  doClose() {\n    const self = this;\n\n    function close() {\n      debug(\"writing close packet\");\n      self.write([{ type: \"close\" }]);\n    }\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n        (\"http\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n}\n\nmodule.exports = Polling;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}