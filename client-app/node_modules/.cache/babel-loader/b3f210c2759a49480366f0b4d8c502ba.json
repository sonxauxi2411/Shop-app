{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nvar socket_io_parser_1 = require(\"socket.io-parser\");\nvar Emitter = require(\"component-emitter\");\nvar on_1 = require(\"./on\");\nvar debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.flags = {};\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_1.on(io, \"open\", this.onopen.bind(this)), on_1.on(io, \"packet\", this.onpacket.bind(this)), on_1.on(io, \"error\", this.onerror.bind(this)), on_1.on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        debug(\"emitting packet with ack id %d\", this.ids);\n        this.acks[this.ids] = args.pop();\n        packet.id = this.ids++;\n      }\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this2 = this;\n      debug(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this2.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect\");\n      this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this3 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this3.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this3.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }]);\n  return Socket;\n}(Emitter);\nexports.Socket = Socket;","map":{"version":3,"names":["Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","Emitter","on_1","debug","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","io","nsp","opts","receiveBuffer","sendBuffer","ids","acks","flags","connected","disconnected","auth","_autoConnect","open","subs","on","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","CONNECT","err","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","subDestroy","undefined","i","splice"],"sources":["C:/Users/Administrator/Desktop/Frontend Assignment 03/client-app/node_modules/socket.io-client/build/socket.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst Emitter = require(\"component-emitter\");\nconst on_1 = require(\"./on\");\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.connected = false;\n        this.disconnected = true;\n        this.flags = {};\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_1.on(io, \"open\", this.onopen.bind(this)),\n            on_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_1.on(io, \"error\", this.onerror.bind(this)),\n            on_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            debug(\"emitting packet with ack id %d\", this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            super.emit(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        super.emit(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                super.emit(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        super.emit(\"connect\");\n        this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}