{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/Administrator/Desktop/ASM3/client-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Administrator/Desktop/ASM3/client-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/Administrator/Desktop/ASM3/client-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Administrator/Desktop/ASM3/client-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Transport = require(\"../transport\");\nvar parser = require(\"engine.io-parser\");\nvar parseqs = require(\"parseqs\");\nvar yeast = require(\"yeast\");\nvar _require = require(\"../util\"),\n  pick = _require.pick;\nvar _require2 = require(\"./websocket-constructor\"),\n  WebSocket = _require2.WebSocket,\n  usingBrowserWebSocket = _require2.usingBrowserWebSocket,\n  defaultBinaryType = _require2.defaultBinaryType;\nvar debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nvar WS = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(WS, _Transport);\n  var _super = _createSuper(WS);\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  function WS(opts) {\n    var _this;\n    _classCallCheck(this, WS);\n    _this = _super.call(this, opts);\n    _this.supportsBinary = !opts.forceBase64;\n    return _this;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  _createClass(WS, [{\n    key: \"name\",\n    get: function get() {\n      return \"websocket\";\n    }\n\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      if (!this.check()) {\n        // let probe timeout\n        return;\n      }\n      var uri = this.uri();\n      var protocols = this.opts.protocols;\n\n      // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n      try {\n        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emit(\"error\", err);\n      }\n      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n      this.addEventListeners();\n    }\n\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var self = this;\n      this.ws.onopen = function () {\n        self.onOpen();\n      };\n      this.ws.onclose = function () {\n        self.onClose();\n      };\n      this.ws.onmessage = function (ev) {\n        self.onData(ev.data);\n      };\n      this.ws.onerror = function (e) {\n        self.onError(\"websocket error\", e);\n      };\n    }\n\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var self = this;\n      this.writable = false;\n\n      // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n      var total = packets.length;\n      var i = 0;\n      var l = total;\n      for (; i < l; i++) {\n        (function (packet) {\n          parser.encodePacket(packet, self.supportsBinary, function (data) {\n            // always create a new object (GH-437)\n            var opts = {};\n            if (!usingBrowserWebSocket) {\n              if (packet.options) {\n                opts.compress = packet.options.compress;\n              }\n              if (self.opts.perMessageDeflate) {\n                var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                if (len < self.opts.perMessageDeflate.threshold) {\n                  opts.compress = false;\n                }\n              }\n            }\n\n            // Sometimes the websocket has already been closed but the browser didn't\n            // have a chance of informing us about it yet, in that case send will\n            // throw an error\n            try {\n              if (usingBrowserWebSocket) {\n                // TypeError is thrown when passing the second argument on Safari\n                self.ws.send(data);\n              } else {\n                self.ws.send(data, opts);\n              }\n            } catch (e) {\n              debug(\"websocket closed before onclose event\");\n            }\n            --total || done();\n          });\n        })(packets[i]);\n      }\n      function done() {\n        self.emit(\"flush\");\n\n        // fake drain\n        // defer to next tick to allow Socket to clear writeBuffer\n        setTimeout(function () {\n          self.writable = true;\n          self.emit(\"drain\");\n        }, 0);\n      }\n    }\n\n    /**\n     * Called upon close\n     *\n     * @api private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      Transport.prototype.onClose.call(this);\n    }\n\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.close();\n        this.ws = null;\n      }\n    }\n\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var port = \"\";\n\n      // avoid port if default for schema\n      if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      // append timestamp to URI\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      // communicate binary support capabilities\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n      query = parseqs.encode(query);\n\n      // prepend ? to query\n      if (query.length) {\n        query = \"?\" + query;\n      }\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n    }\n\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n  }, {\n    key: \"check\",\n    value: function check() {\n      return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n    }\n  }]);\n  return WS;\n}(Transport);\nmodule.exports = WS;","map":{"version":3,"names":["Transport","require","parser","parseqs","yeast","pick","WebSocket","usingBrowserWebSocket","defaultBinaryType","debug","isReactNative","navigator","product","toLowerCase","WS","opts","supportsBinary","forceBase64","check","uri","protocols","extraHeaders","headers","ws","err","emit","binaryType","socket","addEventListeners","self","onopen","onOpen","onclose","onClose","onmessage","ev","onData","data","onerror","e","onError","packets","writable","total","length","i","l","packet","encodePacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","done","setTimeout","prototype","call","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encode","ipv6","hostname","indexOf","path","name","module","exports"],"sources":["C:/Users/Administrator/Desktop/ASM3/client-app/node_modules/engine.io-client/lib/transports/websocket.js"],"sourcesContent":["const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst parseqs = require(\"parseqs\");\nconst yeast = require(\"yeast\");\nconst { pick } = require(\"../util\");\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType\n} = require(\"./websocket-constructor\");\n\nconst debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nconst isReactNative =\n  typeof navigator !== \"undefined\" &&\n  typeof navigator.product === \"string\" &&\n  navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative\n      ? {}\n      : pick(\n          this.opts,\n          \"agent\",\n          \"perMessageDeflate\",\n          \"pfx\",\n          \"key\",\n          \"passphrase\",\n          \"cert\",\n          \"ca\",\n          \"ciphers\",\n          \"rejectUnauthorized\",\n          \"localAddress\",\n          \"protocolVersion\",\n          \"origin\",\n          \"maxPayload\",\n          \"family\",\n          \"checkServerIdentity\"\n        );\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws =\n        usingBrowserWebSocket && !isReactNative\n          ? protocols\n            ? new WebSocket(uri, protocols)\n            : new WebSocket(uri)\n          : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n\n    this.addEventListeners();\n  }\n\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n  addEventListeners() {\n    const self = this;\n\n    this.ws.onopen = function() {\n      self.onOpen();\n    };\n    this.ws.onclose = function() {\n      self.onClose();\n    };\n    this.ws.onmessage = function(ev) {\n      self.onData(ev.data);\n    };\n    this.ws.onerror = function(e) {\n      self.onError(\"websocket error\", e);\n    };\n  }\n\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n  write(packets) {\n    const self = this;\n    this.writable = false;\n\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    let total = packets.length;\n    let i = 0;\n    const l = total;\n    for (; i < l; i++) {\n      (function(packet) {\n        parser.encodePacket(packet, self.supportsBinary, function(data) {\n          // always create a new object (GH-437)\n          const opts = {};\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n\n            if (self.opts.perMessageDeflate) {\n              const len =\n                \"string\" === typeof data\n                  ? Buffer.byteLength(data)\n                  : data.length;\n              if (len < self.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          }\n\n          // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              self.ws.send(data);\n            } else {\n              self.ws.send(data, opts);\n            }\n          } catch (e) {\n            debug(\"websocket closed before onclose event\");\n          }\n\n          --total || done();\n        });\n      })(packets[i]);\n    }\n\n    function done() {\n      self.emit(\"flush\");\n\n      // fake drain\n      // defer to next tick to allow Socket to clear writeBuffer\n      setTimeout(function() {\n        self.writable = true;\n        self.emit(\"drain\");\n      }, 0);\n    }\n  }\n\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\";\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n        (\"ws\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n  check() {\n    return (\n      !!WebSocket &&\n      !(\"__initialize\" in WebSocket && this.name === WS.prototype.name)\n    );\n  }\n}\n\nmodule.exports = WS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}